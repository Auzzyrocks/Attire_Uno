#pragma checksum "C:\Users\brand\Desktop\AttireProject\attire_uno\AttireApp\AttireApp\AttireApp.Shared\ForecastPage.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "8E245CCB0DEC30A1170206BC0A9899C35185117831088434109F43037AE520EF"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AttireApp
{
    partial class ForecastPage : 
        global::Microsoft.UI.Xaml.Controls.Page, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(global::Microsoft.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Microsoft.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Microsoft_UI_Xaml_UIElement_Visibility(global::Microsoft.UI.Xaml.UIElement obj, global::Microsoft.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Image_Source(global::Microsoft.UI.Xaml.Controls.Image obj, global::Microsoft.UI.Xaml.Media.ImageSource value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Microsoft.UI.Xaml.Media.ImageSource) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Microsoft.UI.Xaml.Media.ImageSource), targetNullValue);
                }
                obj.Source = value;
            }
            public static void Set_Microsoft_UI_Xaml_Documents_Run_Text(global::Microsoft.UI.Xaml.Documents.Run obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class ForecastPage_obj11_Bindings :
            global::Microsoft.UI.Xaml.IDataTemplateExtension,
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IForecastPage_Bindings
        {
            private global::AttireApp.Models.DataModels.Hour dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj11;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj12;
            private global::Microsoft.UI.Xaml.Controls.Image obj13;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj14;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj12TextDisabled = false;
            private static bool isobj13SourceDisabled = false;
            private static bool isobj14TextDisabled = false;

            private ForecastPage_obj11_BindingsTracking bindingsTracking;

            public ForecastPage_obj11_Bindings()
            {
                this.bindingsTracking = new ForecastPage_obj11_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 92 && columnNumber == 60)
                {
                    isobj12TextDisabled = true;
                }
                else if (lineNumber == 93 && columnNumber == 56)
                {
                    isobj13SourceDisabled = true;
                }
                else if (lineNumber == 94 && columnNumber == 60)
                {
                    isobj14TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 11: // ForecastPage.xaml line 91
                        this.obj11 = new global::System.WeakReference(global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.StackPanel>(target));
                        break;
                    case 12: // ForecastPage.xaml line 92
                        this.obj12 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 13: // ForecastPage.xaml line 93
                        this.obj13 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Image>(target);
                        break;
                    case 14: // ForecastPage.xaml line 94
                        this.obj14 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            public void DataContextChangedHandler(global::Microsoft.UI.Xaml.FrameworkElement sender, global::Microsoft.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj11.Target as global::Microsoft.UI.Xaml.Controls.StackPanel).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_(global::WinRT.CastExtensions.As<global::AttireApp.Models.DataModels.Hour>(item), 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IForecastPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::AttireApp.Models.DataModels.Hour>(newDataRoot);
                    return true;
                }
                return false;
            }

            private delegate void InvokeFunctionDelegate(int phase);
            private global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate> PendingFunctionBindings = new global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate>();

            private void Invoke_RTime_M_ToShortTimeString_371857150(int phase)
            {
                global::System.String result = this.dataRoot.RTime.ToShortTimeString();
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ForecastPage.xaml line 92
                    if (!isobj12TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj12, result, null);
                    }
                }
            }

            private void CompleteUpdate(int phase)
            {
                var functions = this.PendingFunctionBindings;
                this.PendingFunctionBindings = new global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate>();
                foreach (var function in functions.Values)
                {
                    function.Invoke(phase);
                }
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::AttireApp.Models.DataModels.Hour obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_RTime(obj.RTime, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Condition(obj.Condition, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_TempC(obj.TempC, phase);
                    }
                }
                this.CompleteUpdate(phase);
            }
            private void Update_RTime(global::System.DateTime obj, int phase)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    this.Update_RTime_M_ToShortTimeString_371857150(phase);
                }
            }
            private void Update_RTime_M_ToShortTimeString_371857150(int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    if (!isobj12TextDisabled)
                    {
                        this.PendingFunctionBindings["RTime_M_ToShortTimeString_371857150"] = new InvokeFunctionDelegate(this.Invoke_RTime_M_ToShortTimeString_371857150); 
                    }
                }
            }
            private void Update_Condition(global::AttireApp.Models.DataModels.Condition obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Condition_Icon(obj.Icon, phase);
                    }
                }
            }
            private void Update_Condition_Icon(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // ForecastPage.xaml line 93
                    if (!isobj13SourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Image_Source(this.obj13, (global::Microsoft.UI.Xaml.Media.ImageSource) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Microsoft.UI.Xaml.Media.ImageSource), obj), null);
                    }
                }
            }
            private void Update_TempC(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ForecastPage.xaml line 94
                    if (!isobj14TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj14, obj.ToString(), null);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class ForecastPage_obj11_BindingsTracking
            {
                private global::System.WeakReference<ForecastPage_obj11_Bindings> weakRefToBindingObj; 

                public ForecastPage_obj11_BindingsTracking(ForecastPage_obj11_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<ForecastPage_obj11_Bindings>(obj);
                }

                public ForecastPage_obj11_Bindings TryGetBindingObject()
                {
                    ForecastPage_obj11_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ForecastPage_obj11_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::AttireApp.Models.DataModels.Hour obj = sender as global::AttireApp.Models.DataModels.Hour;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_RTime(obj.RTime, DATA_CHANGED);
                                bindings.Update_TempC(obj.TempC, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "RTime":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_RTime(obj.RTime, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "TempC":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_TempC(obj.TempC, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                public void UpdateChildListeners_(global::AttireApp.Models.DataModels.Hour obj)
                {
                    ForecastPage_obj11_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class ForecastPage_obj7_Bindings :
            global::Microsoft.UI.Xaml.IDataTemplateExtension,
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IForecastPage_Bindings
        {
            private global::AttireApp.Models.DataModels.Forecastday dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj7;
            private global::Microsoft.UI.Xaml.Controls.Image obj8;
            private global::Microsoft.UI.Xaml.Controls.ListView obj9;
            private global::Microsoft.UI.Xaml.Documents.Run obj15;
            private global::Microsoft.UI.Xaml.Documents.Run obj16;
            private global::Microsoft.UI.Xaml.Documents.Run obj17;
            private global::Microsoft.UI.Xaml.Documents.Run obj18;
            private global::Microsoft.UI.Xaml.Documents.Run obj19;
            private global::Microsoft.UI.Xaml.Documents.Run obj20;
            private global::Microsoft.UI.Xaml.Documents.Run obj21;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj8SourceDisabled = false;
            private static bool isobj9ItemsSourceDisabled = false;
            private static bool isobj15TextDisabled = false;
            private static bool isobj16TextDisabled = false;
            private static bool isobj17TextDisabled = false;
            private static bool isobj18TextDisabled = false;
            private static bool isobj19TextDisabled = false;
            private static bool isobj20TextDisabled = false;
            private static bool isobj21TextDisabled = false;

            private ForecastPage_obj7_BindingsTracking bindingsTracking;

            public ForecastPage_obj7_Bindings()
            {
                this.bindingsTracking = new ForecastPage_obj7_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 74 && columnNumber == 51)
                {
                    isobj8SourceDisabled = true;
                }
                else if (lineNumber == 83 && columnNumber == 209)
                {
                    isobj9ItemsSourceDisabled = true;
                }
                else if (lineNumber == 78 && columnNumber == 38)
                {
                    isobj15TextDisabled = true;
                }
                else if (lineNumber == 72 && columnNumber == 38)
                {
                    isobj16TextDisabled = true;
                }
                else if (lineNumber == 63 && columnNumber == 38)
                {
                    isobj17TextDisabled = true;
                }
                else if (lineNumber == 65 && columnNumber == 38)
                {
                    isobj18TextDisabled = true;
                }
                else if (lineNumber == 67 && columnNumber == 38)
                {
                    isobj19TextDisabled = true;
                }
                else if (lineNumber == 56 && columnNumber == 38)
                {
                    isobj20TextDisabled = true;
                }
                else if (lineNumber == 57 && columnNumber == 38)
                {
                    isobj21TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 7: // ForecastPage.xaml line 53
                        this.obj7 = new global::System.WeakReference(global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.StackPanel>(target));
                        break;
                    case 8: // ForecastPage.xaml line 74
                        this.obj8 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Image>(target);
                        break;
                    case 9: // ForecastPage.xaml line 83
                        this.obj9 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ListView>(target);
                        break;
                    case 15: // ForecastPage.xaml line 78
                        this.obj15 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Documents.Run>(target);
                        break;
                    case 16: // ForecastPage.xaml line 72
                        this.obj16 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Documents.Run>(target);
                        break;
                    case 17: // ForecastPage.xaml line 63
                        this.obj17 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Documents.Run>(target);
                        break;
                    case 18: // ForecastPage.xaml line 65
                        this.obj18 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Documents.Run>(target);
                        break;
                    case 19: // ForecastPage.xaml line 67
                        this.obj19 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Documents.Run>(target);
                        break;
                    case 20: // ForecastPage.xaml line 56
                        this.obj20 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Documents.Run>(target);
                        break;
                    case 21: // ForecastPage.xaml line 57
                        this.obj21 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Documents.Run>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            public void DataContextChangedHandler(global::Microsoft.UI.Xaml.FrameworkElement sender, global::Microsoft.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj7.Target as global::Microsoft.UI.Xaml.Controls.StackPanel).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_(global::WinRT.CastExtensions.As<global::AttireApp.Models.DataModels.Forecastday>(item), 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IForecastPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::AttireApp.Models.DataModels.Forecastday>(newDataRoot);
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::AttireApp.Models.DataModels.Forecastday obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Day(obj.Day, phase);
                        this.Update_Hour(obj.Hour, phase);
                        this.Update_Date(obj.Date, phase);
                    }
                }
            }
            private void Update_Day(global::AttireApp.Models.DataModels.Day obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Day(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Day_Condition(obj.Condition, phase);
                        this.Update_Day_DailyChanceOfRain(obj.DailyChanceOfRain, phase);
                        this.Update_Day_MaxtempC(obj.MaxtempC, phase);
                        this.Update_Day_MintempC(obj.MintempC, phase);
                        this.Update_Day_AvgtempC(obj.AvgtempC, phase);
                    }
                }
            }
            private void Update_Day_Condition(global::AttireApp.Models.DataModels.Condition obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Day_Condition(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Day_Condition_Icon(obj.Icon, phase);
                        this.Update_Day_Condition_Text(obj.Text, phase);
                    }
                }
            }
            private void Update_Day_Condition_Icon(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ForecastPage.xaml line 74
                    if (!isobj8SourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Image_Source(this.obj8, (global::Microsoft.UI.Xaml.Media.ImageSource) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Microsoft.UI.Xaml.Media.ImageSource), obj), null);
                    }
                }
            }
            private void Update_Hour(global::System.Collections.Generic.List<global::AttireApp.Models.DataModels.Hour> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ForecastPage.xaml line 83
                    if (!isobj9ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj9, obj, null);
                    }
                }
            }
            private void Update_Day_DailyChanceOfRain(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ForecastPage.xaml line 78
                    if (!isobj15TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Documents_Run_Text(this.obj15, obj.ToString(), null);
                    }
                }
            }
            private void Update_Day_Condition_Text(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ForecastPage.xaml line 72
                    if (!isobj16TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Documents_Run_Text(this.obj16, obj, null);
                    }
                }
            }
            private void Update_Day_MaxtempC(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ForecastPage.xaml line 63
                    if (!isobj17TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Documents_Run_Text(this.obj17, obj.ToString(), null);
                    }
                }
            }
            private void Update_Day_MintempC(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ForecastPage.xaml line 65
                    if (!isobj18TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Documents_Run_Text(this.obj18, obj.ToString(), null);
                    }
                }
            }
            private void Update_Day_AvgtempC(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ForecastPage.xaml line 67
                    if (!isobj19TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Documents_Run_Text(this.obj19, obj.ToString(), null);
                    }
                }
            }
            private void Update_Date(global::System.DateTime obj, int phase)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    this.Update_Date_DayOfWeek(obj.DayOfWeek, phase);
                    this.Update_Date_Day(obj.Day, phase);
                }
            }
            private void Update_Date_DayOfWeek(global::System.DayOfWeek obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ForecastPage.xaml line 56
                    if (!isobj20TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Documents_Run_Text(this.obj20, obj.ToString(), null);
                    }
                }
            }
            private void Update_Date_Day(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ForecastPage.xaml line 57
                    if (!isobj21TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Documents_Run_Text(this.obj21, obj.ToString(), null);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class ForecastPage_obj7_BindingsTracking
            {
                private global::System.WeakReference<ForecastPage_obj7_Bindings> weakRefToBindingObj; 

                public ForecastPage_obj7_BindingsTracking(ForecastPage_obj7_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<ForecastPage_obj7_Bindings>(obj);
                }

                public ForecastPage_obj7_Bindings TryGetBindingObject()
                {
                    ForecastPage_obj7_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                    UpdateChildListeners_Day(null);
                    UpdateChildListeners_Day_Condition(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ForecastPage_obj7_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::AttireApp.Models.DataModels.Forecastday obj = sender as global::AttireApp.Models.DataModels.Forecastday;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Day(obj.Day, DATA_CHANGED);
                                bindings.Update_Hour(obj.Hour, DATA_CHANGED);
                                bindings.Update_Date(obj.Date, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Day":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Day(obj.Day, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Hour":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Hour(obj.Hour, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Date":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Date(obj.Date, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::AttireApp.Models.DataModels.Forecastday obj)
                {
                    ForecastPage_obj7_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
                public void PropertyChanged_Day(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ForecastPage_obj7_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::AttireApp.Models.DataModels.Day obj = sender as global::AttireApp.Models.DataModels.Day;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Day_Condition(obj.Condition, DATA_CHANGED);
                                bindings.Update_Day_DailyChanceOfRain(obj.DailyChanceOfRain, DATA_CHANGED);
                                bindings.Update_Day_MaxtempC(obj.MaxtempC, DATA_CHANGED);
                                bindings.Update_Day_MintempC(obj.MintempC, DATA_CHANGED);
                                bindings.Update_Day_AvgtempC(obj.AvgtempC, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Condition":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Day_Condition(obj.Condition, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "DailyChanceOfRain":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Day_DailyChanceOfRain(obj.DailyChanceOfRain, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "MaxtempC":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Day_MaxtempC(obj.MaxtempC, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "MintempC":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Day_MintempC(obj.MintempC, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "AvgtempC":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Day_AvgtempC(obj.AvgtempC, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::AttireApp.Models.DataModels.Day cache_Day = null;
                public void UpdateChildListeners_Day(global::AttireApp.Models.DataModels.Day obj)
                {
                    if (obj != cache_Day)
                    {
                        if (cache_Day != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Day).PropertyChanged -= PropertyChanged_Day;
                            cache_Day = null;
                        }
                        if (obj != null)
                        {
                            cache_Day = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Day;
                        }
                    }
                }
                public void PropertyChanged_Day_Condition(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ForecastPage_obj7_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::AttireApp.Models.DataModels.Condition obj = sender as global::AttireApp.Models.DataModels.Condition;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Day_Condition_Icon(obj.Icon, DATA_CHANGED);
                                bindings.Update_Day_Condition_Text(obj.Text, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Icon":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Day_Condition_Icon(obj.Icon, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Text":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Day_Condition_Text(obj.Text, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::AttireApp.Models.DataModels.Condition cache_Day_Condition = null;
                public void UpdateChildListeners_Day_Condition(global::AttireApp.Models.DataModels.Condition obj)
                {
                    if (obj != cache_Day_Condition)
                    {
                        if (cache_Day_Condition != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Day_Condition).PropertyChanged -= PropertyChanged_Day_Condition;
                            cache_Day_Condition = null;
                        }
                        if (obj != null)
                        {
                            cache_Day_Condition = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Day_Condition;
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class ForecastPage_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IForecastPage_Bindings
        {
            private global::AttireApp.ForecastPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj3;
            private global::Microsoft.UI.Xaml.Controls.GridView obj4;
            private global::Microsoft.UI.Xaml.Controls.Grid obj5;
            private global::Microsoft.UI.Xaml.Controls.ComboBox obj22;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj3TextDisabled = false;
            private static bool isobj4ItemsSourceDisabled = false;
            private static bool isobj5VisibilityDisabled = false;
            private static bool isobj22ItemsSourceDisabled = false;

            private ForecastPage_obj1_BindingsTracking bindingsTracking;

            public ForecastPage_obj1_Bindings()
            {
                this.bindingsTracking = new ForecastPage_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 32 && columnNumber == 28)
                {
                    isobj3TextDisabled = true;
                }
                else if (lineNumber == 50 && columnNumber == 86)
                {
                    isobj4ItemsSourceDisabled = true;
                }
                else if (lineNumber == 106 && columnNumber == 56)
                {
                    isobj5VisibilityDisabled = true;
                }
                else if (lineNumber == 39 && columnNumber == 69)
                {
                    isobj22ItemsSourceDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3: // ForecastPage.xaml line 32
                        this.obj3 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        this.bindingsTracking.RegisterTwoWayListener_3(this.obj3);
                        break;
                    case 4: // ForecastPage.xaml line 50
                        this.obj4 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.GridView>(target);
                        break;
                    case 5: // ForecastPage.xaml line 106
                        this.obj5 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                        break;
                    case 22: // ForecastPage.xaml line 39
                        this.obj22 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ComboBox>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IForecastPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::AttireApp.ForecastPage>(newDataRoot);
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::AttireApp.ForecastPage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_ViewModel(global::AttireApp.Models.ViewModels.ForecastViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_CitySelected(obj.CitySelected, phase);
                        this.Update_ViewModel_WeatherData(obj.WeatherData, phase);
                        this.Update_ViewModel_IsBusy(obj.IsBusy, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_CityOptions(obj.CityOptions, phase);
                    }
                }
            }
            private void Update_ViewModel_CitySelected(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ForecastPage.xaml line 32
                    if (!isobj3TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj3, obj, null);
                    }
                }
            }
            private void Update_ViewModel_WeatherData(global::AttireApp.Models.DataModels.RootWeatherData obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_WeatherData(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_WeatherData_Forecast(obj.Forecast, phase);
                    }
                }
            }
            private void Update_ViewModel_WeatherData_Forecast(global::AttireApp.Models.DataModels.Forecast obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_WeatherData_Forecast(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_WeatherData_Forecast_Forecastday(obj.Forecastday, phase);
                    }
                }
            }
            private void Update_ViewModel_WeatherData_Forecast_Forecastday(global::System.Collections.Generic.List<global::AttireApp.Models.DataModels.Forecastday> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ForecastPage.xaml line 50
                    if (!isobj4ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj4, obj, null);
                    }
                }
            }
            private void Update_ViewModel_IsBusy(global::System.Boolean obj, int phase)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    this.Update_ViewModel_IsBusy_Cast_IsBusy_To_Visibility(obj ? global::Microsoft.UI.Xaml.Visibility.Visible : global::Microsoft.UI.Xaml.Visibility.Collapsed, phase);
                }
            }
            private void Update_ViewModel_IsBusy_Cast_IsBusy_To_Visibility(global::Microsoft.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ForecastPage.xaml line 106
                    if (!isobj5VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj5, obj);
                    }
                }
            }
            private void Update_ViewModel_CityOptions(global::System.Collections.ObjectModel.ObservableCollection<global::System.String> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // ForecastPage.xaml line 39
                    if (!isobj22ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj22, obj, null);
                    }
                }
            }
            private void UpdateTwoWay_3_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.CitySelected = this.obj3.Text;
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class ForecastPage_obj1_BindingsTracking
            {
                private global::System.WeakReference<ForecastPage_obj1_Bindings> weakRefToBindingObj; 

                public ForecastPage_obj1_BindingsTracking(ForecastPage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<ForecastPage_obj1_Bindings>(obj);
                }

                public ForecastPage_obj1_Bindings TryGetBindingObject()
                {
                    ForecastPage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel(null);
                    UpdateChildListeners_ViewModel_WeatherData(null);
                    UpdateChildListeners_ViewModel_WeatherData_Forecast(null);
                }

                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ForecastPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::AttireApp.Models.ViewModels.ForecastViewModel obj = sender as global::AttireApp.Models.ViewModels.ForecastViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_CitySelected(obj.CitySelected, DATA_CHANGED);
                                bindings.Update_ViewModel_WeatherData(obj.WeatherData, DATA_CHANGED);
                                bindings.Update_ViewModel_IsBusy(obj.IsBusy, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "CitySelected":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CitySelected(obj.CitySelected, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "WeatherData":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_WeatherData(obj.WeatherData, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsBusy":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_IsBusy(obj.IsBusy, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::AttireApp.Models.ViewModels.ForecastViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::AttireApp.Models.ViewModels.ForecastViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_WeatherData(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ForecastPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::AttireApp.Models.DataModels.RootWeatherData obj = sender as global::AttireApp.Models.DataModels.RootWeatherData;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_WeatherData_Forecast(obj.Forecast, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Forecast":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_WeatherData_Forecast(obj.Forecast, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::AttireApp.Models.DataModels.RootWeatherData cache_ViewModel_WeatherData = null;
                public void UpdateChildListeners_ViewModel_WeatherData(global::AttireApp.Models.DataModels.RootWeatherData obj)
                {
                    if (obj != cache_ViewModel_WeatherData)
                    {
                        if (cache_ViewModel_WeatherData != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_WeatherData).PropertyChanged -= PropertyChanged_ViewModel_WeatherData;
                            cache_ViewModel_WeatherData = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_WeatherData = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_WeatherData;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_WeatherData_Forecast(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ForecastPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::AttireApp.Models.DataModels.Forecast obj = sender as global::AttireApp.Models.DataModels.Forecast;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_WeatherData_Forecast_Forecastday(obj.Forecastday, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Forecastday":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_WeatherData_Forecast_Forecastday(obj.Forecastday, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::AttireApp.Models.DataModels.Forecast cache_ViewModel_WeatherData_Forecast = null;
                public void UpdateChildListeners_ViewModel_WeatherData_Forecast(global::AttireApp.Models.DataModels.Forecast obj)
                {
                    if (obj != cache_ViewModel_WeatherData_Forecast)
                    {
                        if (cache_ViewModel_WeatherData_Forecast != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_WeatherData_Forecast).PropertyChanged -= PropertyChanged_ViewModel_WeatherData_Forecast;
                            cache_ViewModel_WeatherData_Forecast = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_WeatherData_Forecast = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_WeatherData_Forecast;
                        }
                    }
                }
                public void RegisterTwoWayListener_3(global::Microsoft.UI.Xaml.Controls.TextBlock sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.TextBlock.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_3_Text();
                        }
                    });
                }
            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // ForecastPage.xaml line 15
                {
                    this.ViewModel = global::WinRT.CastExtensions.As<global::AttireApp.Models.ViewModels.ForecastViewModel>(target);
                }
                break;
            case 22: // ForecastPage.xaml line 39
                {
                    this.CityCombo = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ComboBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ComboBox)this.CityCombo).SelectionChanged += this.CityChange_SelectionChanged;
                }
                break;
            case 23: // ForecastPage.xaml line 43
                {
                    global::Microsoft.UI.Xaml.Controls.Button element23 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)element23).Click += this.HomePage_Click;
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // ForecastPage.xaml line 1
                {                    
                    global::Microsoft.UI.Xaml.Controls.Page element1 = (global::Microsoft.UI.Xaml.Controls.Page)target;
                    ForecastPage_obj1_Bindings bindings = new ForecastPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            case 7: // ForecastPage.xaml line 53
                {                    
                    global::Microsoft.UI.Xaml.Controls.StackPanel element7 = (global::Microsoft.UI.Xaml.Controls.StackPanel)target;
                    ForecastPage_obj7_Bindings bindings = new ForecastPage_obj7_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element7.DataContext);
                    element7.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Microsoft.UI.Xaml.DataTemplate.SetExtensionInstance(element7, bindings);
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element7, bindings);
                }
                break;
            case 11: // ForecastPage.xaml line 91
                {                    
                    global::Microsoft.UI.Xaml.Controls.StackPanel element11 = (global::Microsoft.UI.Xaml.Controls.StackPanel)target;
                    ForecastPage_obj11_Bindings bindings = new ForecastPage_obj11_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element11.DataContext);
                    element11.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Microsoft.UI.Xaml.DataTemplate.SetExtensionInstance(element11, bindings);
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element11, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

